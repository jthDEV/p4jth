# add distance key/value to meteor_data json

for e in meteor_data :
    ...:     if not ('reclat' in e and 'reclong' in e ) : continue
    ...:     e['distance'] = calc_dist(float(e['reclat']), float(e['reclong']),m
    ...: y_loc[0],my_loc[1])

#Define function returning the value of distance key

def get_dist(meteor):
    ...:     return meteor.get('distance', math.inf)
    ...:

#NOTE: get will handle non existent keys w/o error, while meteor['distance'] would cause errors, if distance would not exit. math.inf is a constant for inifinity


In [33]: meteor_data.sort(key=get_dist)

#the sort function (of list) gets a another function passed, determinig the value of the key. see https://www.programiz.com/python-programming/methods/list/sort for more 